"use client";

import React, { useEffect, useRef, useState } from "react";
// import { getAccessToken } from "@auth0/nextjs-auth0";
import { getAccessToken } from "@/components/DummyUser";
import Box from "@mui/material/Box";
import Toolbar from "@mui/material/Toolbar";
import MenuOfLinks from "@/components/MenuOfLinks";
import Modal from "@mui/material/Modal";
import DynamicPopUp from "@/components/Account/DynamicPopUp";
import {
  useNavbar,
  NavbarValues,
  navbarAppLinks,
} from "@/context/NavbarContext";
import { useBookmark } from "@/context/BookmarkContext";
import { User, emptyUser, getUser } from "@/API/User";
import { ClickableTableRowProps } from "@/API/JSON";

export default function Account() {
  const { updateFunction } = useNavbar();
  const { updateBookmarks } = useBookmark();
  const [accessToken, setAccessToken] = useState("");
  const [currUser, setCurrUser] = useState<User>(emptyUser);
  const [userLoaded, setUserLoaded] = useState(false);
  const hasRun1 = useRef(false);
  const hasRun2 = useRef(false);

  useEffect(() => {
    if (!hasRun1.current) {
      const getData = async () => {
        try {
          hasRun1.current = true;

          if (accessToken == "") {
            const token = await getAccessToken();
            setAccessToken(token);
            const userData = await getUser(token);
            setCurrUser(userData);
            setUserLoaded(true);
          } else {
            const userData = await getUser(accessToken);
            setCurrUser(userData);
            setUserLoaded(true);
          }
        } catch (error) {
          console.log(error);
        }
      };
      getData();
    }
  });

  useEffect(() => {
    if (!hasRun2.current) {
      hasRun2.current = true;

      const navbarContextPageValues: NavbarValues = {
        mobileTitle: "Account",
        desktopTitle: "My Account",
        hrefTitle: "/Dashboard",
        mobileTopIcon: "none",
        NavbarLinks: navbarAppLinks,
      };
      updateFunction(navbarContextPageValues);

      // toggle to trigger bookmarks icon to check if page is bookmarked
      updateBookmarks(true);
    }
  });

  // state for multipurpose input modal
  const [inputModal, setinputModal] = React.useState(false);
  const [inputModalEntry, setinputModalEntry] = useState<User>(emptyUser);
  const [inputModalPurpose, setinputModalPurpose] = useState<string>("");

  const handleinputModalClose = () => {
    setinputModal(false);
    setinputModalEntry(emptyUser);
    setinputModalPurpose("");
  };

  const handleinputModalOpen = () => {
    if (userLoaded) {
      setinputModal(true);
      setinputModalEntry(currUser);
      setinputModalPurpose("edit");
    }
  };

  const accountLinkButtonData: ClickableTableRowProps[] = [
    {
      hrefOrFunction: handleinputModalOpen,
      label: "Edit Account Details",
      externalLink: false,
    },
    {
      hrefOrFunction: "/auth/logout",
      label: "Sign Out",
      externalLink: true,
    },
  ];

  const generalLinkButtonData: ClickableTableRowProps[] = [
    {
      hrefOrFunction: "mailto:hrecord.books@oregonstate.edu",
      label: "Email Support",
      externalLink: true,
    },
  ];

  //goes in body tag, per autogenerated index.html file in public folder
  return (
    <Box className="App">
      <Toolbar
        disableGutters
        sx={{
          display: { xs: "flex" },
          flexDirection: "row",
          justifyContent: "space-between",
        }}
      >
        <Box
          sx={{
            flexGrow: 1,
            display: { xs: "flex", md: "none" },
            width: "100%",
          }}
        >
          <Box
            sx={{
              width: "100%",
            }}
          >
            <Box
              sx={{
                flex: 1,
                position: "relative",
                padding: "20px",
                Width: "80%",
                paddingLeft: "10%",
                paddingRight: "10%",
                paddingBottom: "50px",
              }}
            >
              <MenuOfLinks array={accountLinkButtonData} menuTitle="Account" />
            </Box>
            <Box
              sx={{
                flex: 1,
                position: "relative",
                padding: "20px",
                Width: "80%",
                paddingLeft: "10%",
                paddingRight: "10%",
                paddingBottom: "50px",
              }}
            >
              <MenuOfLinks array={generalLinkButtonData} menuTitle="General" />
            </Box>
          </Box>
        </Box>
        <Box
          sx={{
            flexGrow: 1,
            display: { xs: "none", md: "flex" },
            width: "100%",
          }}
        >
          <Box
            sx={{
              flex: 1,
              position: "relative",
              paddingLeft: "5%",
              paddingRight: "5%",
              paddingTop: "15px",
            }}
          >
            <MenuOfLinks array={accountLinkButtonData} menuTitle="Account" />
          </Box>
          <Box
            sx={{
              flex: 1,
              position: "relative",
              Width: "40%",
              paddingLeft: "5%",
              paddingRight: "5%",
              paddingTop: "15px",
            }}
          >
            <MenuOfLinks array={generalLinkButtonData} menuTitle="General" />
          </Box>
        </Box>
      </Toolbar>
      <Modal
        open={inputModal}
        onClose={handleinputModalClose}
        aria-labelledby="input-modal-title"
        aria-describedby="input-modal-description"
      >
        <DynamicPopUp
          currUser={inputModalEntry}
          handleModalClose={handleinputModalClose}
          purpose={inputModalPurpose}
        />
      </Modal>
    </Box>
  );
}
