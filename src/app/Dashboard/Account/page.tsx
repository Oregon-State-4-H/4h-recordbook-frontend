"use client";

import React, { useEffect, useRef, useState } from "react";
import Box from "@mui/material/Box";
import Toolbar from "@mui/material/Toolbar";
import MenuOfLinks from "@/components/MenuOfLinks";
import Modal from "@mui/material/Modal";
import DynamicPopUp from "@/components/Account/DynamicPopUp";
import {
  useNavbar,
  NavbarValues,
  navbarAppLinks,
} from "@/context/NavbarContext";
import { useBookmark } from "@/context/BookmarkContext";
import { User, emptyUser } from "@/API/User";

export default function Account() {
  const { updateFunction } = useNavbar();
  const { updateBookmarks } = useBookmark();
  const hasRun = useRef(false);

  // state for multipurpose input modal
  const [inputModal, setinputModal] = React.useState(false);
  let [inputModalEntry, setinputModalEntry] = useState<User>(emptyUser);
  let [inputModalPurpose, setinputModalPurpose] = useState<string>("");

  const handleinputModalClose = () => {
    setinputModal(false);
    setinputModalEntry(emptyUser);
    setinputModalPurpose("");
  };

  const handleinputModalOpen = (currinputModalEntry: User) => {
    setinputModal(true);
    setinputModalEntry(currinputModalEntry);
    setinputModalPurpose("edit");
  };

  useEffect(() => {
    if (!hasRun.current) {
      const navbarContextPageValues: NavbarValues = {
        mobileTitle: "Account",
        desktopTitle: "My Account",
        hrefTitle: "/Dashboard",
        mobileTopIcon: "none",
        NavbarLinks: navbarAppLinks,
      };
      updateFunction(navbarContextPageValues);

      // toggle to trigger bookmarks icon to check if page is bookmarked
      updateBookmarks(true);

      hasRun.current = true;
    }
  });

  const linkButtonData: [
    string | ((currinputModalEntry: User) => void),
    string
  ][] = [
    ["/auth/logout", "Sign Out"],
    [handleinputModalOpen, "Edit Account Details"],
  ];

  //goes in body tag, per autogenerated index.html file in public folder
  return (
    <Box className="App">
      <Toolbar
        disableGutters
        sx={{
          display: { xs: "flex" },
          flexDirection: "row",
          justifyContent: "space-between",
        }}
      >
        <Box
          sx={{
            flexGrow: 1,
            display: { xs: "flex", md: "none" },
            width: "100%",
          }}
        >
          <Box
            sx={{
              width: "100%",
            }}
          >
            <Box
              sx={{
                flex: 1,
                position: "relative",
                padding: "20px",
                Width: "80%",
                paddingLeft: "10%",
                paddingRight: "10%",
                paddingBottom: "50px",
              }}
            >
              <MenuOfLinks array={linkButtonData} menuTitle="Account" />
            </Box>
            <Box
              sx={{
                flex: 1,
                position: "relative",
                padding: "20px",
                Width: "80%",
                paddingLeft: "10%",
                paddingRight: "10%",
                paddingBottom: "50px",
              }}
            >
              <MenuOfLinks array={[]} menuTitle="General" />
            </Box>
          </Box>
        </Box>
        <Box
          sx={{
            flexGrow: 1,
            display: { xs: "none", md: "flex" },
            width: "100%",
          }}
        >
          <Box
            sx={{
              flex: 1,
              position: "relative",
              paddingLeft: "5%",
              paddingRight: "5%",
              paddingTop: "15px",
            }}
          >
            <MenuOfLinks array={linkButtonData} menuTitle="Account" />
          </Box>
          <Box
            sx={{
              flex: 1,
              position: "relative",
              Width: "40%",
              paddingLeft: "5%",
              paddingRight: "5%",
              paddingTop: "15px",
            }}
          >
            <MenuOfLinks array={[]} menuTitle="General" />
          </Box>
        </Box>
      </Toolbar>
      <Modal
        open={inputModal}
        onClose={handleinputModalClose}
        aria-labelledby="input-modal-title"
        aria-describedby="input-modal-description"
      >
        <DynamicPopUp
          currUser={inputModalEntry}
          handleModalClose={handleinputModalClose}
          purpose={inputModalPurpose}
        />
      </Modal>
    </Box>
  );
}
