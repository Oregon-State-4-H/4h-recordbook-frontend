"use client";

import React, { useState, useEffect, useRef } from "react";
import { getAccessToken } from "@auth0/nextjs-auth0";
import { useParams, usePathname } from "next/navigation";
import Modal from "@mui/material/Modal";
import Box from "@mui/material/Box";
import SubpageCard from "@/components/LinkCard";
import CreateButton from "@/components/Projects/CreateIconButton";
import DynamicPopUp from "@/components/Projects/DynamicPopUp";
import Grid from "@mui/material/Grid";
import {
  useNavbar,
  NavbarValues,
  navbarAppLinks,
} from "@/context/NavbarContext";
import { useBookmark } from "@/context/BookmarkContext";
import {
  Animal,
  fetchSubpageEntriesByProject,
  AnimalProjectTypes,
  emptyAnimal,
  isAnimal,
} from "@/API/ProjectAPI";

function Dashboard() {
  const { updateFunction } = useNavbar();
  const { updateBookmarks } = useBookmark();
  const { data } = useParams<{ data: string }>();
  const [validId, setValidId] = useState(true);
  // const [projectLoaded, setProjectLoaded] = useState(false);
  const [accessToken, setAccessToken] = useState("");
  const [allSubpageEntries, setAllSubpageEntries] = useState<Animal[]>([]);
  const [subpageDataLoaded, setSubpageDataLoaded] = useState(false);
  const hasRun = useRef(false);
  const hasRun2 = useRef(false);
  const pathname = usePathname();

  const updateAnimalArr = (updatedArr: AnimalProjectTypes[]) => {
    const animalSubset: Animal[] = updatedArr.filter((item) => isAnimal(item));
    setAllSubpageEntries(animalSubset);
  };

  // state for multipurpose input modal
  const [inputModal, setinputModal] = React.useState(false);
  const [inputModalEntry, setinputModalEntry] =
    useState<AnimalProjectTypes>(emptyAnimal);
  const [inputModalPurpose, setinputModalPurpose] = useState<string>("");

  const handleinputModalClose = () => {
    setinputModal(false);
    setinputModalEntry(emptyAnimal);
    setinputModalPurpose("");
  };

  const handleinputModalOpen = (
    currinputModalEntry: AnimalProjectTypes,
    purpose: string
  ) => {
    setinputModal(true);
    setinputModalEntry(currinputModalEntry);
    setinputModalPurpose(purpose);
  };

  useEffect(() => {
    if (!hasRun.current) {
      const getData = async () => {
        try {
          hasRun.current = true;

          if (accessToken == "") {
            const token = await getAccessToken();
            setAccessToken(token);
            const subpageData = await fetchSubpageEntriesByProject<Animal>(
              token,
              "animal",
              data
            );
            if (typeof subpageData == "string") {
              setValidId(false);
            } else {
              setAllSubpageEntries(subpageData);
              setSubpageDataLoaded(true);
            }
          } else {
            const subpageData = await fetchSubpageEntriesByProject<Animal>(
              accessToken,
              "animal",
              data
            );
            if (typeof subpageData == "string") {
              setValidId(false);
            } else {
              setAllSubpageEntries(subpageData);
              setSubpageDataLoaded(true);
            }
          }
        } catch (error) {
          console.log(error);
        }
      };
      getData();
    }
  });

  // when page is loaded, update title
  useEffect(() => {
    if (!hasRun2.current && (subpageDataLoaded || !validId)) {
      if (validId) {
        const navbarContextPageValues: NavbarValues = {
          mobileTitle: "Animals",
          desktopTitle: "Project Animals",
          hrefTitle: "/Dashboard",
          NavbarLinks: navbarAppLinks,
        };
        updateFunction(navbarContextPageValues);

        // toggle to trigger bookmarks icon to check if page is bookmarked
        updateBookmarks(true);
      } else {
        const navbarContextPageValues: NavbarValues = {
          mobileTitle: "Animal Not Found",
          desktopTitle: "Animal Not Found",
          hrefTitle: "/Dashboard",
          NavbarLinks: navbarAppLinks,
        };
        updateFunction(navbarContextPageValues);

        // toggle to trigger bookmarks icon to check if page is bookmarked
        updateBookmarks(true);
      }
      hasRun2.current = true;
    }
  });

  //goes in body tag, per autogenerated index.html file in public folder
  if (!validId) {
    console.log("Invalid project id else statement");
    return <Box className="App"></Box>;
  } else if (validId && subpageDataLoaded) {
    console.log(allSubpageEntries);
    return (
      <Box className="App">
        <Box
          sx={{
            width: "90%",
            marginLeft: "5%",
            marginRight: "5%",
            display: "flex",
            flexDirection: "row",
          }}
        >
          {/* first box is placeholder for component that will have preview and download resume pdf */}
          <Box
            sx={{
              width: "50%",
              margin: "0px",
              padding: "0px",
            }}
          ></Box>
          <CreateButton handleOpen={handleinputModalOpen} />
        </Box>
        {/* For every subpage, generate a clickable card */}
        <Box
          sx={{
            flexGrow: 1,
            display: { xs: "flex", md: "none" },
            width: "100%",
            flexDirection: "column",
            paddingBottom: "50px",
          }}
        >
          {allSubpageEntries &&
            allSubpageEntries.length > 0 &&
            allSubpageEntries.map((item, index) => (
              <SubpageCard
                key={index}
                label={item.name}
                path={pathname + "/" + item.id.replaceAll(" ", "")}
              />
            ))}
        </Box>
        <Box
          sx={{
            width: "90%",
            display: { xs: "none", md: "block" },
            marginLeft: "5%",
            marginRight: "5%",
            marginTop: "15px",
          }}
        >
          <Grid
            container
            rowSpacing={1}
            columnSpacing={0}
            sx={{
              width: "100%",
            }}
          >
            {allSubpageEntries &&
              allSubpageEntries.length > 0 &&
              allSubpageEntries.map((item, index) => (
                <Grid size={6} key={index}>
                  <SubpageCard
                    label={item.name}
                    path={pathname + "/" + item.id.replaceAll(" ", "")}
                  />
                </Grid>
              ))}
          </Grid>
        </Box>

        <Modal
          open={inputModal}
          onClose={handleinputModalClose}
          aria-labelledby="input-modal-title"
          aria-describedby="input-modal-description"
        >
          <DynamicPopUp
            subpage="Animal"
            subpageEntry={inputModalEntry}
            handleModalClose={handleinputModalClose}
            purpose={inputModalPurpose}
            project_id={data}
            setSubpageEntries={updateAnimalArr}
            priorSubpageEntries={allSubpageEntries}
          />
        </Modal>
      </Box>
    );
  }
}

export default Dashboard;
