"use client";

import React, { useState, useEffect, useRef } from "react";
// import { getAccessToken } from "@auth0/nextjs-auth0";
import { getAccessToken } from "@/components/DummyUser";
import { useParams, usePathname } from "next/navigation";
import Box from "@mui/material/Box";
import TitleOnly from "@/components/TitleOnly";
import { Project } from "@/API/ProjectAPI";
import AnimalCard from "@/components/Projects/AnimalCard";
import Grid from "@mui/material/Grid";
import {
  useNavbar,
  NavbarValues,
  navbarAppLinks,
} from "@/context/NavbarContext";
import { useBookmark } from "@/context/BookmarkContext";
import { useProject } from "@/context/ProjectContext";
import {
  Animal,
  // AnimalProjectTypes,
  fetchSubpageEntriesByProject,
  // emptyExpense,
} from "@/API/ProjectAPI";

function Dashboard() {
  const { currNavbarValues, updateFunction } = useNavbar();
  const { updateBookmarks } = useBookmark();
  const params = useParams<{ tag: string; item: string }>();
  const { data }: any = params;
  const [validId, setValidId] = useState(true);
  // const [projectLoaded, setProjectLoaded] = useState(false);
  let [currProject, setProject] = useState<Project>();
  const [accessToken, setAccessToken] = useState("");
  const { updateProjects, currProjectValues, populated } = useProject();
  let [allSubpageEntries, setAllSubpageEntries] = useState<Animal[]>([]);
  const [subpageDataLoaded, setSubpageDataLoaded] = useState(false);
  const hasRun = useRef(false);

  const pathname = usePathname();

  useEffect(() => {
    if (!hasRun.current) {
      const getData = async () => {
        try {
          // if the array of all projects is not populated, get project from backend
          if (accessToken == "") {
            const token = await getAccessToken();
            setAccessToken(token);
            const subpageData = await fetchSubpageEntriesByProject<Animal>(
              token,
              "animal",
              data
            );
            setAllSubpageEntries(subpageData);
            setSubpageDataLoaded(true);
          } else {
            const subpageData = await fetchSubpageEntriesByProject<Animal>(
              accessToken,
              "expense",
              data
            );
            setAllSubpageEntries(subpageData);
            setSubpageDataLoaded(true);
          }
        } catch (error) {
          console.log(error);
        }
        const navbarContextPageValues: NavbarValues = {
          mobileTitle: "Project Animals",
          desktopTitle: "Project Animals",
          hrefTitle: "/Dashboard",
          mobileTopIcon: "none",
          NavbarLinks: navbarAppLinks,
        };
        updateFunction(navbarContextPageValues);

        // toggle to trigger bookmarks icon to check if page is bookmarked
        updateBookmarks(true);

        hasRun.current = true;
      };
      getData();
    }
  });

  //goes in body tag, per autogenerated index.html file in public folder
  if (!validId) {
    console.log("Invalid project id else statement");
    return <TitleOnly title="Project Not Found" cloverLoader={false} />;
    // } else if (validId && !projectLoaded) {
    //   console.log("Loading project else statement");
    //   return <TitleOnly title="Loading..." cloverLoader={true} />;
    // } else if (validId && projectLoaded && typeof currProject == "undefined") {
    //   console.log("undefined project else statement");
    //   return <TitleOnly title="Error (Joy to fix)" cloverLoader={false} />;
    // } else if (projectLoaded && validId && isProject(currProject)) {
  } else if (validId) {
    return (
      <Box className="App">
        {/* For every subpage, generate a clickable card */}
        <Box
          sx={{
            flexGrow: 1,
            display: { xs: "flex", md: "none" },
            width: "100%",
            flexDirection: "column",
            paddingBottom: "50px",
          }}
        >
          {allSubpageEntries &&
            allSubpageEntries.length > 0 &&
            allSubpageEntries.map((item, index) => (
              <AnimalCard
                key={index}
                entry={item}
                href={pathname + "/" + data}
              />
            ))}
        </Box>
        <Box
          sx={{
            width: "90%",
            display: { xs: "none", md: "block" },
            marginLeft: "5%",
            marginRight: "5%",
            marginTop: "15px",
          }}
        >
          <Grid
            container
            rowSpacing={1}
            columnSpacing={0}
            sx={{
              width: "100%",
            }}
          >
            {allSubpageEntries &&
              allSubpageEntries.length > 0 &&
              allSubpageEntries.map((item, index) => (
                <AnimalCard
                  key={index}
                  entry={item}
                  href={pathname + "/" + data}
                />
              ))}
          </Grid>
        </Box>
      </Box>
    );
  }
}

export default Dashboard;
