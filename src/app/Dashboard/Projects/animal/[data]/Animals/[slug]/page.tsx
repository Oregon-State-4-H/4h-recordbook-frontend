"use client";

import React, { useState, useEffect, useRef } from "react";
// import { getAccessToken } from "@auth0/nextjs-auth0";
import { getAccessToken } from "@/components/DummyUser";
import { useParams, usePathname } from "next/navigation";
import Box from "@mui/material/Box";
import { isAnimal, fetchAnimal, Animal } from "@/API/ProjectAPI";
import SubpageCard from "@/components/LinkCard";
import Grid from "@mui/material/Grid";
import {
  useNavbar,
  NavbarValues,
  navbarAppLinks,
} from "@/context/NavbarContext";
import { useBookmark } from "@/context/BookmarkContext";

export default function ProjectDetail() {
  const { updateFunction } = useNavbar();
  const { updateBookmarks } = useBookmark();
  const { slug } = useParams<{ slug: string }>();
  const [validId, setValidId] = useState(true);
  const [animalLoaded, setAnimalLoaded] = useState(false);
  const [currAnimal, setAnimal] = useState<Animal>();
  const [accessToken, setAccessToken] = useState("");
  const pathname = usePathname();
  const hasRun1 = useRef(false);
  const hasRun2 = useRef(false);

  useEffect(() => {
    if (!hasRun1.current) {
      const getData = async () => {
        try {
          hasRun1.current = true;

          if (accessToken == "") {
            const token = await getAccessToken();
            setAccessToken(token);
            const animalData = await fetchAnimal(token, slug);
            if (typeof animalData == "string") {
              setValidId(false);
            } else {
              setAnimal(animalData);
              setAnimalLoaded(true);
            }
          } else {
            const animalData = await fetchAnimal(accessToken, slug);
            if (typeof animalData == "string") {
              setValidId(false);
            } else {
              setAnimal(animalData);
              setAnimalLoaded(true);
            }
          }
        } catch (error) {
          console.log(error);
        }
      };
      getData();
    }
  });

  // when page is loaded, update title
  useEffect(() => {
    if (!hasRun2.current && (animalLoaded || !validId)) {
      if (validId && isAnimal(currAnimal)) {
        const title: string = currAnimal.name + " Detail";
        const navbarContextPageValues: NavbarValues = {
          mobileTitle: title,
          desktopTitle: title,
          hrefTitle: "/Dashboard",
          mobileTopIcon: "none",
          NavbarLinks: navbarAppLinks,
        };
        updateFunction(navbarContextPageValues);

        // toggle to trigger bookmarks icon to check if page is bookmarked
        updateBookmarks(true);
      } else {
        const navbarContextPageValues: NavbarValues = {
          mobileTitle: "Animal Not Found",
          desktopTitle: "Animal Not Found",
          hrefTitle: "/Dashboard",
          mobileTopIcon: "none",
          NavbarLinks: navbarAppLinks,
        };
        updateFunction(navbarContextPageValues);

        // toggle to trigger bookmarks icon to check if page is bookmarked
        updateBookmarks(true);
      }
      hasRun2.current = true;
    }
  });

  //goes in body tag, per autogenerated index.html file in public folder
  if (!validId) {
    return <Box className="App"></Box>;
  } else if (animalLoaded && validId && isAnimal(currAnimal)) {
    const Subpages = [
      "Animals",
      "Feed Record",
      "Feed Inventory",
      "Expense",
      "Supplies",
    ];

    return (
      <Box className="App">
        {/* For every subpage, generate a clickable card */}
        <Box
          sx={{
            flexGrow: 1,
            display: { xs: "flex", md: "none" },
            width: "100%",
            flexDirection: "column",
            paddingBottom: "50px",
          }}
        >
          {Subpages &&
            Subpages.length > 0 &&
            Subpages.map((item, index) => (
              <SubpageCard
                key={index}
                label={item}
                path={pathname + "/" + item.replaceAll(" ", "")}
              />
            ))}
        </Box>
        <Box
          sx={{
            width: "90%",
            display: { xs: "none", md: "block" },
            marginLeft: "5%",
            marginRight: "5%",
            marginTop: "15px",
          }}
        >
          <Grid
            container
            rowSpacing={1}
            columnSpacing={0}
            sx={{
              width: "100%",
            }}
          >
            {Subpages &&
              Subpages.length > 0 &&
              Subpages.map((item, index) => (
                <Grid size={6} key={index}>
                  <SubpageCard
                    label={item}
                    path={pathname + "/" + item.replaceAll(" ", "")}
                  />
                </Grid>
              ))}
          </Grid>
        </Box>
      </Box>
    );
  }
}
