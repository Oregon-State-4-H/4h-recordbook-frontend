"use client";

import React, { useState, useEffect, useRef } from "react";
// import { getAccessToken } from "@auth0/nextjs-auth0";
import { getAccessToken } from "@/components/DummyUser";
import { useParams } from "next/navigation";
import Box from "@mui/material/Box";
import Modal from "@mui/material/Modal";
import Toolbar from "@mui/material/Toolbar";
import {
  isAnimal,
  fetchAnimal,
  Animal,
  emptyAnimal,
  AnimalProjectTypes,
} from "@/API/ProjectAPI";
import {
  useNavbar,
  NavbarValues,
  navbarAppLinks,
} from "@/context/NavbarContext";
import ReadCard from "@/components/Projects/MobileReadCard";
import DynamicPopUp from "@/components/Projects/DynamicPopUp";
import { useBookmark } from "@/context/BookmarkContext";

export default function ProjectDetail() {
  const { updateFunction } = useNavbar();
  const { updateBookmarks } = useBookmark();
  const { data } = useParams<{ data: string }>();
  const { slug } = useParams<{ slug: string }>();
  const [validId, setValidId] = useState(true);
  const [animalLoaded, setAnimalLoaded] = useState(false);
  const [currAnimal, setAnimal] = useState<Animal>();
  const [accessToken, setAccessToken] = useState("");
  const hasRun1 = useRef(false);
  const hasRun2 = useRef(false);

  // state for multipurpose input modal
  const [inputModal, setinputModal] = React.useState(false);
  const [inputModalEntry, setinputModalEntry] =
    useState<AnimalProjectTypes>(emptyAnimal);
  const [inputModalPurpose, setinputModalPurpose] = useState<string>("");
  const [subpage, setSubpage] = useState<string>("");

  const handleinputModalClose = () => {
    setinputModal(false);
    setinputModalEntry(emptyAnimal);
    setinputModalPurpose("");
  };

  const handleinputModalOpenAnimal = (
    currinputModalEntry: AnimalProjectTypes,
    purpose: string
  ) => {
    setinputModal(true);
    setinputModalEntry(currinputModalEntry);
    setinputModalPurpose(purpose);
    setSubpage("Animal");
  };

  const handleinputModalOpenGain = (
    currinputModalEntry: AnimalProjectTypes,
    purpose: string
  ) => {
    setinputModal(true);
    setinputModalEntry(currinputModalEntry);
    setinputModalPurpose(purpose);
    setSubpage("Gain");
  };

  const updateAnimalFromArr = (updatedAnimalArr: AnimalProjectTypes[]) => {
    if (isAnimal(updatedAnimalArr[0])) {
      setAnimal(updatedAnimalArr[0]);
    }
  };

  useEffect(() => {
    if (!hasRun1.current) {
      const getData = async () => {
        try {
          hasRun1.current = true;

          if (accessToken == "") {
            const token = await getAccessToken();
            setAccessToken(token);
            const animalData = await fetchAnimal(token, slug);
            if (typeof animalData == "string") {
              setValidId(false);
            } else {
              setAnimal(animalData);
              setAnimalLoaded(true);
            }
          } else {
            const animalData = await fetchAnimal(accessToken, slug);
            if (typeof animalData == "string") {
              setValidId(false);
            } else {
              setAnimal(animalData);
              setAnimalLoaded(true);
            }
          }
        } catch (error) {
          console.log(error);
        }
      };
      getData();
    }
  });

  // when page is loaded, update title
  useEffect(() => {
    if (!hasRun2.current && (animalLoaded || !validId)) {
      if (validId && isAnimal(currAnimal)) {
        const title: string = currAnimal.name + " Detail";
        const navbarContextPageValues: NavbarValues = {
          mobileTitle: title,
          desktopTitle: title,
          hrefTitle: "/Dashboard",
          NavbarLinks: navbarAppLinks,
        };
        updateFunction(navbarContextPageValues);

        // toggle to trigger bookmarks icon to check if page is bookmarked
        updateBookmarks(true);
      } else {
        const navbarContextPageValues: NavbarValues = {
          mobileTitle: "Animal Not Found",
          desktopTitle: "Animal Not Found",
          hrefTitle: "/Dashboard",
          NavbarLinks: navbarAppLinks,
        };
        updateFunction(navbarContextPageValues);

        // toggle to trigger bookmarks icon to check if page is bookmarked
        updateBookmarks(true);
      }
      hasRun2.current = true;
    }
  });

  //goes in body tag, per autogenerated index.html file in public folder
  if (!validId) {
    return <Box className="App"></Box>;
  } else if (animalLoaded && validId && isAnimal(currAnimal)) {
    return (
      <Box>
        <Toolbar
          disableGutters
          sx={{
            display: { xs: "flex" },
            flexDirection: "row",
            justifyContent: "space-between",
          }}
        >
          <Box
            sx={{
              flexGrow: 1,
              display: { xs: "flex", md: "none" },
              width: "100%",
            }}
          >
            <Box
              sx={{
                width: "100%",
              }}
            >
              <Box
                sx={{
                  flex: 1,
                  position: "relative",
                  padding: "20px",
                  Width: "80%",
                  paddingLeft: "10%",
                  paddingRight: "10%",
                  paddingBottom: "50px",
                }}
              >
                <ReadCard
                  jwt={accessToken}
                  endpoint="animal"
                  projectSubentry={currAnimal}
                  handleOpenInput={handleinputModalOpenAnimal}
                  deleteButton={true}
                />
              </Box>
              <Box
                sx={{
                  flex: 1,
                  position: "relative",
                  padding: "20px",
                  Width: "80%",
                  paddingLeft: "10%",
                  paddingRight: "10%",
                  paddingBottom: "50px",
                }}
              >
                <ReadCard
                  jwt={accessToken}
                  endpoint="gain"
                  projectSubentry={currAnimal}
                  handleOpenInput={handleinputModalOpenGain}
                  deleteButton={false}
                />
              </Box>
            </Box>
          </Box>
          <Box
            sx={{
              flexGrow: 1,
              display: { xs: "none", md: "flex" },
              width: "100%",
            }}
          >
            <Box
              sx={{
                flex: 1,
                position: "relative",
                paddingLeft: "5%",
                paddingRight: "5%",
                paddingTop: "15px",
              }}
            >
              <ReadCard
                jwt={accessToken}
                endpoint="animal"
                projectSubentry={currAnimal}
                handleOpenInput={handleinputModalOpenAnimal}
                deleteButton={true}
              />
            </Box>
            <Box
              sx={{
                flex: 1,
                position: "relative",
                Width: "40%",
                paddingLeft: "5%",
                paddingRight: "5%",
                paddingTop: "15px",
              }}
            >
              <ReadCard
                jwt={accessToken}
                endpoint="gain"
                projectSubentry={currAnimal}
                handleOpenInput={handleinputModalOpenGain}
                deleteButton={false}
              />
            </Box>
          </Box>
        </Toolbar>
        <Modal
          open={inputModal}
          onClose={handleinputModalClose}
          aria-labelledby="input-modal-title"
          aria-describedby="input-modal-description"
        >
          <DynamicPopUp
            subpage={subpage}
            subpageEntry={inputModalEntry}
            handleModalClose={handleinputModalClose}
            purpose={inputModalPurpose}
            project_id={data}
            setSubpageEntries={updateAnimalFromArr}
            priorSubpageEntries={[currAnimal]}
          />
        </Modal>
      </Box>
    );
  }
}
