"use client";

import React, { useState, useEffect, useRef } from "react";
import { getAccessToken } from "@auth0/nextjs-auth0";
import Box from "@mui/material/Box";
import Grid from "@mui/material/Grid";
import Modal from "@mui/material/Modal";
import CreateButton from "@/components/CreateIconButton";
import { DynamicPopUpProject } from "@/components/Projects/DynamicPopUp";
import {
  useNavbar,
  NavbarValues,
  navbarAppLinks,
} from "@/context/NavbarContext";
import { useBookmark } from "@/context/BookmarkContext";
import { useProject } from "@/context/ProjectContext";
import { Project, fetchAllProjects, emptyProject } from "@/API/ProjectAPI";
import PreviewCard from "@/components/Projects/PreviewCard";
import { usePathname } from "next/navigation";

function Dashboard() {
  const pathname = usePathname();
  const { updateFunction } = useNavbar();
  const { updateBookmarks } = useBookmark();
  const { updateProjects, currProjectValues, populated } = useProject();
  const [accessToken, setAccessToken] = useState("");
  const [allProjects, setAllProjects] = useState<Project[]>(currProjectValues);
  const setProjects = (Projects: Project[]) => {
    setAllProjects(Projects);
    updateProjects(Projects);
  };
  const hasRun1 = useRef(false);
  const hasRun2 = useRef(false);

  // state for multipurpose input modal
  const [inputModal, setinputModal] = React.useState(false);
  const [inputModalEntry, setinputModalEntry] = useState<Project>(emptyProject);
  const inputModalPurpose = "create";

  // get auth0 jwt and projects
  useEffect(() => {
    if (!hasRun1.current) {
      hasRun1.current = true;

      const navbarContextPageValues: NavbarValues = {
        mobileTitle: "Projects",
        desktopTitle: "All Projects",
        hrefTitle: "/Dashboard",
        NavbarLinks: navbarAppLinks,
      };
      updateFunction(navbarContextPageValues);

      // toggle to trigger bookmarks icon to check if page is bookmarked
      updateBookmarks(true);
    }

    if (!hasRun2.current) {
      const getProjectData = async () => {
        try {
          hasRun2.current = true;
          console.log("data exsists for projects?", populated);
          if (!populated) {
            if (accessToken == "") {
              const token = await getAccessToken();
              setAccessToken(token);
              const projectData = await fetchAllProjects(token);
              setProjects(projectData);
            } else {
              const projectData = await fetchAllProjects(accessToken);
              setProjects(projectData);
            }
          }
        } catch (error) {
          console.error(error);
        }
      };
      getProjectData();
    }
  });

  //goes in body tag, per autogenerated index.html file in public folder
  return (
    <Box className="App">
      <Box
        sx={{
          width: "90%",
          marginLeft: "5%",
          marginRight: "5%",
          display: "flex",
          flexDirection: "row",
        }}
      >
        {/* first box is placeholder for component that will have preview and download resume pdf */}
        <Box
          sx={{
            width: "50%",
            margin: "0px",
            padding: "0px",
          }}
        ></Box>
        <CreateButton
          handleOpen={() => {
            setinputModal(true);
          }}
        />
      </Box>
      <Box
        sx={{
          flexGrow: 1,
          display: { xs: "flex", md: "none" },
          width: "90%",
          marginLeft: "5%",
          marginRight: "5%",
          flexDirection: "column",
          paddingBottom: "50px",
        }}
      >
        {allProjects &&
          allProjects.length > 0 &&
          allProjects.map((item, index) => (
            <PreviewCard
              key={index}
              project={item}
              path={pathname + "/" + item.type + "/" + item.id}
            />
          ))}
      </Box>
      <Box
        sx={{
          width: "100%",
          display: { xs: "none", md: "block" },
          marginLeft: "5%",
          marginRight: "5%",
          marginTop: "15px",
        }}
      >
        <Grid
          container
          rowSpacing={1}
          columnSpacing={0}
          sx={{
            width: "100%",
          }}
        >
          {allProjects &&
            allProjects.length > 0 &&
            allProjects.map((item, index) => (
              <Grid size={4} key={index}>
                <PreviewCard
                  project={item}
                  path={pathname + "/" + item.type + "/" + item.id}
                />
              </Grid>
            ))}
        </Grid>
      </Box>
      <Modal
        open={inputModal}
        onClose={() => {
          setinputModal(false);
        }}
        aria-labelledby="input-modal-title"
        aria-describedby="input-modal-description"
      >
        <DynamicPopUpProject
          handleModalClose={() => {
            setinputModal(false);
          }}
          setAllProjects={setAllProjects}
          priorProjects={allProjects}
        />
      </Modal>
    </Box>
  );
}

export default Dashboard;
